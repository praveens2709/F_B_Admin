@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* sidebar */
/* import React, { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IconDefinition, IconProp } from '@fortawesome/fontawesome-svg-core';
import { faTachometerAlt, faUsers, faUser, faCog } from '@fortawesome/free-solid-svg-icons';
import { Link } from 'react-router-dom';
import flower from "../assets/images/Flower.png";
import logout from "../assets/images/turn-off.png";

interface SidebarProps {
    isOpen: boolean;
}

const Sidebar: React.FC<SidebarProps> = ({ isOpen }) => {
    const [hoveredMenu, setHoveredMenu] = useState<string | null>(null);
    const [selectedMenu, setSelectedMenu] = useState<string | null>('dashboard');
    const [hoveredLogout, setHoveredLogout] = useState<boolean>(false);

    const handleMenuClick = (menu: string) => {
        setSelectedMenu(menu);
    };

    const isSelected = (menu: string) => selectedMenu === menu;

    const getIcon = (menu: string): IconProp => {
        switch (menu) {
            case 'dashboard':
                return faTachometerAlt as IconProp;
            case 'moderators':
                return faUsers as IconProp;
            case 'customers':
                return faUsers as IconProp;
            case 'profile':
                return faUser as IconProp;
            case 'settings':
                return faCog as IconProp;
            default:
                return faTachometerAlt as IconProp;
        }
    };

    return (
        <aside
            className={`bg-white h-screen flex flex-col p-4 transition-all ${isOpen ? 'w-72' : 'w-24'} relative`}
        >
            <div className="bg-[#FFF5E1] pt-4 px-4 rounded-t-lg flex-grow flex flex-col">
                <div className="pb-5 flex items-center space-x-2">
                    <img src={flower} alt="Logo" className={`w-8 h-8 ${isOpen ? '' : 'mx-auto'}`} />
                    {isOpen && <span className="text-xl text-[#FF6F61] font-bold">F&B Admin</span>}
                </div>
                <nav className="flex-grow relative">
                    <ul>
                        {['dashboard', 'moderators', 'customers', 'profile', 'settings'].map(menu => (
                            <Link key={menu} to={`/${menu}`}>
                                <li
                                    className={`px-4 py-2 mb-2 cursor-pointer flex items-center space-x-4 rounded-md transition-colors relative ${!isOpen && 'justify-center'} ${isSelected(menu) ? 'bg-[#FF6F61] text-white' : 'hover:bg-orange-200'}`}
                                    onClick={() => handleMenuClick(menu)}
                                    onMouseEnter={() => setHoveredMenu(menu)}
                                    onMouseLeave={() => setHoveredMenu(null)}
                                >
                                    <FontAwesomeIcon
                                        icon={getIcon(menu)}
                                        className="w-5 h-5"
                                    />
                                    {isOpen && <span>{menu.charAt(0).toUpperCase() + menu.slice(1)}</span>}
                                    {hoveredMenu === menu && !isOpen && (
                                        <div
                                        className={`absolute left-full top-1/2 transform -translate-y-1/2 rounded-md px-2 py-1 bg-orange-100 text-[#FF6F61] text-xs font-medium whitespace-nowrap z-50`}
                                        >
                                            {menu.charAt(0).toUpperCase() + menu.slice(1)}
                                        </div>
                                    )}
                                </li>
                            </Link>
                        ))}
                    </ul>
                </nav>
            </div>
            <div className={`mt-auto relative ${!isOpen ? 'flex justify-center' : ''}`}>
                <button
                    onClick={() => console.log("Logged out")}
                    className={`w-full px-5 py-2 flex items-center space-x-4 bg-[#FF6F61] text-white rounded-b-lg font-semibold relative`}
                    onMouseEnter={() => setHoveredLogout(true)}
                    onMouseLeave={() => setHoveredLogout(false)}
                >
                    <img src={logout} className="w-6 h-6" alt="Logout" />
                    {isOpen && <span>Logout</span>}
                    {!isOpen && hoveredLogout && (
                        <div
                            className={`absolute left-12 top-1/2 transform -translate-y-1/2 rounded-md px-2 py-1 bg-orange-100 text-[#FF6F61] text-xs font-medium whitespace-nowrap z-50`}
                        >
                            Logout
                        </div>
                    )}
                </button>
            </div>
        </aside>
    );
};

export default Sidebar; */


/* moderators */
/* import React, { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { IconProp } from '@fortawesome/fontawesome-svg-core';
import { faEllipsisV, faPen, faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';

const data = [
    {
        id: 1,
        profileImage: '/path-to-profile-image.jpg',
        name: 'Rajesh Bishnoi',
        email: 'raja@example.com',
        dateTime: '2024-08-08 12:34:56'
    },
    {
        id: 2,
        profileImage: '/path-to-profile-image.jpg',
        name: 'Khushal Saboo',
        email: 'saboo@example.com',
        dateTime: '2024-08-09 12:34:56'
    },
];

const Moderators: React.FC = () => {
    const [searchTerm, setSearchTerm] = useState('');
    const [openActions, setOpenActions] = useState<number | null>(null);

    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const value = event.target.value;
        if (/^[a-zA-Z0-9]*$/.test(value)) {
            setSearchTerm(value);
        }
    };

    const toggleActions = (id: number) => {
        setOpenActions(openActions === id ? null : id);
    };

    const filteredData = data.filter(mod => 
        mod.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        mod.email.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div>
            <div className="mb-4">
                <h1 className="text-2xl font-medium text-[#FF6F61]">Moderators</h1>
            </div>
            <div className="mb-4 flex items-center justify-between">
                <input
                    type="text"
                    value={searchTerm}
                    onChange={handleSearchChange}
                    placeholder="Search by name or email"
                    className="border p-2 w-full max-w-xs border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-[#FF6F61]"
                />
                <button className="ml-4 px-4 py-2 bg-[#FF6F61] text-white rounded hover:bg-[#FFF5E1] hover:text-[#FF6F61] border-2 border-[#FF6F61] font-semibold flex items-center">
                    <FontAwesomeIcon icon={faPlus as IconProp} className="mr-2" />
                    Add Moderator
                </button>
            </div>
            <table className="min-w-full bg-white border border-gray-200 rounded-lg">
                <thead>
                    <tr className="bg-[#FFF5E1] border-b">
                        <th className="p-2 text-left text-[#FF6F61]">Profile</th>
                        <th className="p-2 text-left text-[#FF6F61]">Name</th>
                        <th className="p-2 text-left text-[#FF6F61]">Email</th>
                        <th className="p-2 text-left text-[#FF6F61]">Date & Time</th>
                        <th className="p-2 text-center text-[#FF6F61]">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredData.map(mod => (
                        <tr key={mod.id} className="border-b hover:bg-[#FFF5E1]">
                            <td className="p-2">
                                <img src={mod.profileImage} alt="Profile" className="w-10 h-10 rounded-full border border-gray-300" />
                            </td>
                            <td className="p-2 text-gray-800">{mod.name}</td>
                            <td className="p-2 text-gray-800">{mod.email}</td>
                            <td className="p-2 text-gray-800">{mod.dateTime}</td>
                            <td className="p-2 text-center">
                                <div className="relative inline-block">
                                    <FontAwesomeIcon
                                        icon={faEllipsisV as IconProp}
                                        className="cursor-pointer text-lg text-[#FF6F61]"
                                        onClick={() => toggleActions(mod.id)}
                                    />
                                    {openActions === mod.id && (
                                        <div className="absolute right-0 mt-2 bg-white border border-gray-300 shadow-lg rounded-md text-sm">
                                            <button className="block px-4 py-2 text-left hover:bg-gray-100 text-[#FF6F61]">
                                                <FontAwesomeIcon icon={faPen as IconProp} className="mr-2 text-xs" />
                                                Edit
                                            </button>
                                            <button className="block px-4 py-2 text-left hover:bg-gray-100 text-[#FF6F61]">
                                                <FontAwesomeIcon icon={faTrash as IconProp} className="mr-2 text-xs" />
                                                Delete
                                            </button>
                                        </div>
                                    )}
                                </div>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default Moderators; */
